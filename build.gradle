plugins {
	id 'application'
	id 'idea'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
	id 'org.openjfx.javafxplugin' version '0.0.9'
	id 'com.github.ben-manes.versions' version '0.28.0'
}

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()
}

mainClassName = "github.macro.Launcher"
def loggerVersion = '2.13.3'
def jacksonVersion = '2.11.1'

dependencies {
	implementation group: 'org.jetbrains', name:'annotations', version:"19.0.0"
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion"
	implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "$jacksonVersion"
	implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: "$jacksonVersion"
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "$loggerVersion"
	runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$loggerVersion"
}

javafx {
	version = "11.0.2"
	modules = [ 'javafx.controls' ]
}

compileJava {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

compileTestJava {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

jar {
	manifest.attributes provider: 'gradle'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

shadowJar {
	archiveBaseName.set('Exile-Buddy')
	archiveClassifier.set(null)
	archiveVersion.set(null)
}

run {
	standardInput = System.in
}

clean {
	delete 'release'
}

task copyApplication(type: Copy) {
	from 'scripts'
	into "$buildDir/libs"
}

task copyResources(type: Copy) {
	from 'resources'
	into "$buildDir/libs/resources"
}

task fullRelease(type: Zip) {
	dependsOn 'shadowJar', 'copyApplication', 'copyResources'

	from "$buildDir/libs"
	include '**/*'
	archiveFileName = 'Exile-Buddy.zip'
	destinationDir(file('release'))
}

task applicationRelease(type: Zip) {
	dependsOn 'shadowJar', 'copyApplication'

	from "$buildDir/libs"
	include '*.jar'
	include '*.sh'
	include '*.bat'
	archiveFileName = 'Exile-Buddy-Application.zip'
	destinationDir(file('release'))
}

task resourcesRelease(type: Zip) {
	dependsOn 'copyResources'

	from "$buildDir/libs/resources"
	include '**/*'
	archiveFileName = 'Exile-Buddy-Resources.zip'
	destinationDir(file('release'))
}

task release {
	dependsOn 'fullRelease', 'applicationRelease', 'resourcesRelease'
}